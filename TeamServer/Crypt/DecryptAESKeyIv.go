package Crypt

import (
	"crypto/rsa"

	"crypto/x509"
	"encoding/pem"
	"log"
	"os"
)

func DecryptKeyIV(AESKey []byte, AESKeySize uint32, filepath string) ([]byte, error) {

	DecryptedKeyOrIv, err := DecryptAESKeyIvInGo(AESKey, AESKeySize, filepath+"Config\\test_implant_rsa_private_key.pem")
	if err != nil {
		log.Println("[error] attempting to decrypt AES key in Go", err)
	}

	return DecryptedKeyOrIv, nil
}

func DecryptAESKeyIvInGo(AESKey []byte, AESKeySize uint32, filepath string) ([]byte, error) {

	privateKeyPem, err := os.ReadFile(filepath)
	if err != nil {
		return []byte{}, err
	}
	block, _ := pem.Decode(privateKeyPem)
	privateKey, err := x509.ParsePKCS1PrivateKey(block.Bytes)

	plaintext, err := rsa.DecryptPKCS1v15(nil, privateKey, AESKey)
	if err != nil {
		return []byte{}, err
	}

	return plaintext, nil
}

/*
var EncryptedAesKey = []byte{0x3f, 0xf5, 0x8f, 0xa5, 0x71, 0x0c, 0x33, 0xff, 0xd2, 0x5a, 0x3d, 0x77, 0xb9, 0xfe, 0x4e, 0xc9, 0x2b, 0x76, 0x6d, 0xf9, 0x7a, 0x8e, 0x15, 0x5a, 0x0d, 0x65, 0xa8, 0x0e, 0x8c, 0xa5, 0x06, 0x19, 0x7d, 0x23, 0xeb, 0xd5, 0xca, 0xf6, 0x15, 0x6c, 0x06, 0xf9, 0xb4, 0xdf, 0xb0, 0x7c, 0xda, 0xbe, 0x1e, 0x07, 0x3b, 0xdb, 0x8e, 0x9b, 0x79, 0xa5, 0x63, 0x02, 0xb5, 0x3e, 0xee, 0xe1, 0x6a, 0x30, 0x17, 0x50, 0xf4, 0xb9, 0x6d, 0x14, 0x82, 0xc8, 0x30, 0x27, 0xb0, 0x08, 0x0f, 0xb4, 0x79, 0x47, 0x02, 0x5a, 0x58, 0x03, 0x58, 0x53, 0xba, 0xa8, 0xea, 0x35, 0xef, 0xb4, 0x82, 0x2f, 0x8f, 0xcf, 0xa6, 0x18, 0x91, 0xea, 0xf0, 0xe5, 0x8e, 0x19, 0x6c, 0xa6, 0x71, 0x9f, 0x3c, 0xb7, 0x53, 0xf6, 0x06, 0xae, 0x10, 0x4f, 0x32, 0xf4, 0xc2, 0xad, 0x98, 0x79, 0x90, 0x58, 0x61, 0xb4, 0x07, 0xdf, 0xe9, 0x1a, 0x63, 0x9e, 0x1b, 0xe4, 0xfe, 0x0d, 0xd0, 0x8f, 0xbd, 0x93, 0x8d, 0x6c, 0x6d, 0xce, 0x5a, 0xd5, 0x3d, 0x76, 0x5c, 0x72, 0xfb, 0xdb, 0xbe, 0x46, 0x45, 0xa9, 0x99, 0xa8, 0x7e, 0xf3, 0xce, 0xcb, 0xd0, 0x0e, 0x08, 0x9a, 0x38, 0xea, 0xb0, 0x65, 0xc8, 0x7c, 0x78, 0x25, 0xa5, 0xf9, 0x38, 0x0a, 0x37, 0x07, 0x0c, 0x70, 0x04, 0x70, 0xdc, 0xf9, 0x5a, 0x72, 0xd8, 0x29, 0x0e, 0xe4, 0x3b, 0x33, 0x1b, 0x6d, 0xca, 0x81, 0x9e, 0xb6, 0xa3, 0x9c, 0x44, 0x9f, 0x5a, 0x39, 0xc3, 0x19, 0x93, 0x08, 0x18, 0x4a, 0x80, 0x7b, 0x2e, 0x8f, 0xd4, 0x61, 0xa0, 0xd9, 0xfb, 0x2f, 0xf8, 0x0e, 0x54, 0xb2, 0xb8, 0x50, 0xe9, 0x93, 0x9b, 0x0c, 0x6c, 0xf3, 0xdb, 0xc0, 0x97, 0x6f, 0x94, 0xac, 0x17, 0xf2, 0xae, 0xd4, 0x92, 0xa3, 0x8a, 0xe1, 0x2c, 0xb3, 0x14, 0x86, 0xf3, 0xe2, 0x63, 0x64}
var DecryptedAesKey = []byte{0x7a, 0xf5, 0x49, 0x97, 0x1a, 0xbd, 0xb3, 0xb8, 0xbd, 0x27, 0x7e, 0xf7, 0x96, 0x30, 0xe7, 0x40, 0x62, 0x68, 0xf0, 0x1b, 0xba, 0x49, 0x93, 0x11, 0xdd, 0x30, 0xbe, 0xce, 0x05, 0x7e, 0xca, 0xdc}

func DecryptAES(filepath string) ([]byte, error) {
	privateKeyPem, err := os.ReadFile(filepath)
	if err != nil {
		return []byte{}, err
	}
	block, _ := pem.Decode(privateKeyPem)
	privateKey, err := x509.ParsePKCS1PrivateKey(block.Bytes)

	plaintext, err := rsa.DecryptPKCS1v15(nil, privateKey, EncryptedAesKey)
	if err != nil {
		return []byte{}, err
	}

	fmt.Printf("Decrypted AES Key: \n{ ")
	for _, b := range plaintext {
		fmt.Printf("0x%02X ", b)
	}
	fmt.Println("}")
	fmt.Printf("Plaintext AES Key: \n{ ")
	for _, b := range DecryptedAesKey {
		fmt.Printf("0x%02X ", b)
	}
	fmt.Println("}")

	return plaintext, nil
}
*/
